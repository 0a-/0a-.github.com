<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>0a: a thunk, a propositional variable, a \n</title>
    <description>May the *force* be with you. Let us embrace null-arity. There exists a more straightforward interpretation as well. </description>
    <link>http://0a.io/</link>
    <atom:link href="http://0a.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 05 Feb 2016 13:50:38 +0800</pubDate>
    <lastBuildDate>Fri, 05 Feb 2016 13:50:38 +0800</lastBuildDate>
    <generator>Jekyll v3.0.2</generator>
    
      <item>
        <title>End of Chapter 1</title>
        <description>&lt;p&gt;I used to be afraid of waking up one day and realising that everything I had experienced was a construct of the mind and the reality that I knew of did not exist, and that I was the equivalence of a deaf, blind, and anosmic person with the inability to sense anything - resembling that of a function which takes in no argument, in a sense an I/O of &lt;a href=&quot;https://en.wikipedia.org/wiki/0A&quot;&gt;0-arity&lt;/a&gt; - in the actual reality wherein, as such, I have no way of knowing or interacting with the outside world. So I mentally constructed the current reality and deluded myself into thinking that it is real, and that I am a member of the most dominant species on a gigantic sphere, and that I have friends and first-degree relatives I can count on, and that things make sense here, and that it is natural for there to be consistency in the way stuff behave in this universe, which, comes to think about it, is bloody strange.&lt;/p&gt;

&lt;p&gt;I used to be afraid.&lt;/p&gt;

&lt;p&gt;But I no longer do. Perhaps the past never existed and I was never once afraid: all there is is the presence: the concept about the flow of time is nothing more than a mental device engendering the expectation regarding the arrival of “the future” which is too a construct of the mind in the frozen presence that never once moved. Or perhaps I’ve constructed this immediate experience only to get myself to realise that perhaps the discussion of whether something is real or exists is meaningless and that existence itself does not quite exist in the actual reality the way as depicted in any ontological thinking. Or perhaps after all these years of existence, I’m beginning to take peace in the idea that I have always been alone and that the world never existed. It has all along been me, and nothing. Very minimalistic. Very elegant. And by &lt;em&gt;me&lt;/em&gt; I don’t mean the person who is doing all this thinking of course. Nor am I referring to the conscious mind which is basically a product of a certain subset of neurons in the brain. I’m not exactly sure what I am referring to. It doesn’t quite matter actually.&lt;/p&gt;

&lt;p&gt;Oh, my dear readers, what I’d like to tell you is that I’ve changed quite a lot since I started writing on 0a.io last September. I am now ready for a new chapter in life. I’m thinking about doing some substantial reconstruction for this site of mine. I would be altering the way things are organized, adding new features, improving the GUI, and building it more functionally this time. The plan in mind: &lt;a href=&quot;https://github.com/jaspervdj/hakyll&quot;&gt;Hakyll&lt;/a&gt; + &lt;a href=&quot;https://github.com/rackt/redux&quot;&gt;Redux&lt;/a&gt; + &lt;a href=&quot;https://github.com/dekujs/deku&quot;&gt;Deku&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is the end of Chapter 1.&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://0a.io/end-of-chapter-1/</link>
        <guid isPermaLink="true">http://0a.io/end-of-chapter-1/</guid>
        
        
      </item>
    
      <item>
        <title>NDTM vs DTM</title>
        <description>&lt;p&gt;From a set-theorical point of view, non-deterministic Turing machines (NDTM) and deterministic Turing machines (DTM) are pretty similar objects. Actually, all DTMs are NDTMs: all functions are relations, and the only difference between these two objects lies in that one is defined in terms of a function, while the other is defined in terms of a relation. To be more precise, a DTM is represented by some 3-tuple &lt;script type=&quot;math/tex&quot;&gt;(\Sigma, Q, f)&lt;/script&gt; where &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; is a function mapping from &lt;script type=&quot;math/tex&quot;&gt;Q \times \Sigma^k&lt;/script&gt; into &lt;script type=&quot;math/tex&quot;&gt;Q \times \Sigma^{k-1} \times \{-1,0,1\}^k&lt;/script&gt; (for some &lt;script type=&quot;math/tex&quot;&gt;k \geq 2&lt;/script&gt;), while a NDTM is represented by some 3-tuple &lt;script type=&quot;math/tex&quot;&gt;(\Sigma, Q, r)&lt;/script&gt; where &lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt; is a relation between &lt;script type=&quot;math/tex&quot;&gt;Q \times \Sigma^k&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;Q \times \Sigma^{k-1} \times \{-1,0,1\}^k&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Consider the following variant of the P vs NP question: for every finite subset of any language decidable by a NDTM in a polynomial number of state transitions proportional to the size of the input, does there exist a DTM that too decides this subset of the language in a polynomial number of state transitions? Unlike the P vs NP question, this is asking about a finite subset of a language, rather than the language itself which has a cardinality of &lt;script type=&quot;math/tex&quot;&gt;\aleph_0&lt;/script&gt;, and is to be answered in the affirmative.&lt;/p&gt;

&lt;p&gt;For any finite subset of some language decidable by a polynomial-time NDTM, there always exists a polynomial-time DTM that decides on this subset of the language, where its set of states is the superset of the Cartesian product of this subset of the language and the set of states of the NDTM, and its transition function is a superset of the union of the transition functions of DTMs each deciding only a singleton subset of the subset (with its set of states &lt;script type=&quot;math/tex&quot;&gt;Q&lt;/script&gt; changed to &lt;script type=&quot;math/tex&quot;&gt;\{ (S,q) : q \in Q \}&lt;/script&gt; where &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; is the input string that encodes the element in the singleton), to be constructed based on how the NDTM would halt on the element. It decides the subset of the language by first reading the input string and, in a few state transitions, arriving at the corresponding initial state of the DTM that decides a singleton whose element is encoded in the input, or a rejecting state if none of the DTMs it is composed of accepts the input.&lt;/p&gt;

&lt;p&gt;The idea is that so long as it is about deciding a finite subset of a language, we can always derive a DTM from a NDTM theoretically.&lt;/p&gt;

&lt;p&gt;Now consider another variant of the question about the existence of a DTM whose set of states has a cardinality less than or equal to &lt;script type=&quot;math/tex&quot;&gt;\aleph_0&lt;/script&gt;, rather than a DTM with a finite set of states (as how it is defined in Turing’s model). Similar to how there always exists a DTM for deciding a finite subset of a language as demonstrated above, there always exists an infinite-states DTM (so long as the axioms of our set theory allow it) for deciding a language in polynomial time, for every language decidable by a polynomial-time NDTM. And similar to the corresponding finite-states DTM for a subset of the language, the construction of such infinite-states DTM relies on the “knowledge” about how the NDTM would decide each element in the language. Therefore, once again, there is no practical way for constructing such DTM if we do not have access to the NDTM at the first place.&lt;/p&gt;

&lt;p&gt;So here is a question: “&lt;em&gt;for every language decidable by such infinite-states DTM, does there exist a finite-states DTM that too decides it in polynomial-time?&lt;/em&gt;” and that is one way of viewing the P vs NP question.&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://0a.io/nondeterministic-Turing-machines-vs-deterministic-Turing-machines/</link>
        <guid isPermaLink="true">http://0a.io/nondeterministic-Turing-machines-vs-deterministic-Turing-machines/</guid>
        
        
      </item>
    
      <item>
        <title>to \aleph 1 and beyond</title>
        <description>&lt;p&gt;Today’s lecture was on code abstraction. In one part Professor Danvy gave an example on how recursion can be viewed from a more mathematical point of view through demonstrating the $\mathbb{N}$-bijective nature of some set of procedures. Here is the idea:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;errorf&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&#39;f&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;is not defined for ~s&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zero?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f2&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zero?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f3&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zero?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;as more procedures are enumerated in this a manner, we would be able to do factorial on a larger subset of the natural numbers. There isn’t really recursion going on since there is no self-referencing. And this can continue to infinity. But as anyone with a common sense would know, this goes as far as $\aleph_0$ by virtue to the fact that it is bijective to $\mathbb{N}$.&lt;/p&gt;

&lt;p&gt;So a curious question arises: let &lt;script type=&quot;math/tex&quot;&gt;F_{\mathbb{N}}&lt;/script&gt; be some set of procedures that can be enumerated like above, is it possible to construct a set of procedures, &lt;script type=&quot;math/tex&quot;&gt;F_{\mathbb{R}}&lt;/script&gt;, similar to &lt;script type=&quot;math/tex&quot;&gt;F_{\mathbb{N}}&lt;/script&gt; (the notation of it being similar to &lt;script type=&quot;math/tex&quot;&gt;F_{\mathbb{N}}&lt;/script&gt; is rather tricky here: let’s just say it is similar in that it is related to recursion, or that it is a generalization of &lt;script type=&quot;math/tex&quot;&gt;F_{\mathbb{N}}&lt;/script&gt;), that has a cardinality equal or greater than &lt;script type=&quot;math/tex&quot;&gt;\aleph_1&lt;/script&gt;? Since such set of procedures cannot be enumerated as George Cantor had demonstrated more than a century ago (O! the whirligig of time), it would need to be constructed in a different manner.&lt;/p&gt;

&lt;p&gt;The same question can be asked regarding Turing machine: can we formulate a model of computation, similar to that of Turing’s (or more of a generalization of it), such that there exists a single object, U, that can (similar to how every Turing machine can be simulated by a Universal Turing machine) simulate every object in this model, wherein every $r \in \mathbb{R}$ can be used to encode a distinct object? Perhaps in such model, there exists some object that can solve a subset of the Halting problem previously unsolvable (i.e. those which halt in a set of steps with a cardinality less than $\aleph_1$ (and now we have successfully drawn the &lt;a href=&quot;http://plato.stanford.edu/entries/continuum-hypothesis/&quot;&gt;continuum hypothesis&lt;/a&gt; into the discussion)).&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Sep 2015 00:00:00 +0800</pubDate>
        <link>http://0a.io/to-aleph-1-and-beyond/</link>
        <guid isPermaLink="true">http://0a.io/to-aleph-1-and-beyond/</guid>
        
        
      </item>
    
      <item>
        <title>Attending univ lecture live for the first time</title>
        <description>&lt;p&gt;For anthropic machines of my age, I have gone through a good number of papers and undergrad &amp;amp; grad texts, (some of which I’m still struggling to decipher) - I am fortunate to have a sister currently in NUS, whose student ID can be used to gain access to databases of publishing firms around the world - and sat through a good number of video lectures - once again, I am fortunate to have been born into the era of Open Course Ware, a point in time in human history when it is possible to learn everything taught in undergrad classes by yourself without the necessity of spending a tremendous sum of money. Nonetheless, I have never physically attended a univ lecture before, until yesterday.  It was a lecture on computer vision and pattern recognition, or to be more precise, that was the name of the module, CS4243, and one of the topics in CS that I am least bit familiar with and not especially passionate about. (There are pretty few modules with first digit n ≥4 whose lecture is on Monday so I ended up taking that). The professor was a man in his forties. He was not particularly charismatic but neither was he a bore. He did a great job making the lecture as interesting as possible, and it was really fun.&lt;/p&gt;

&lt;p&gt;I enjoyed it.&lt;/p&gt;

&lt;p&gt;As an anthropic machine, what it “feels like” in one’s mind plays a significant role in one’s overall evaluation of a certain experience. Somehow to the mind there is a remarkable distinction between watching a video recording of a lecture, and being in the lecture room attending the lecture in person, despite the fact that as far as the content of the lecture is concerned, they are just different mediums presenting the same information for the process of knowledge acquisition. As much as I hate to admit it, in the end of the day the way our minds works is hugely dominated by the “feeling” aspect of our lives, no matter how rational we may want to believe we are. But how can we give a more formal definition for these things that we label such ambiguously as “feelings” which may turn out to play a rather fundamental role in the process of thought composition?&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Sep 2015 00:00:00 +0800</pubDate>
        <link>http://0a.io/attending-univ-lecture-live-for-the-first-time/</link>
        <guid isPermaLink="true">http://0a.io/attending-univ-lecture-live-for-the-first-time/</guid>
        
        
      </item>
    
      <item>
        <title>Some thoughts I had while working on the conjecture</title>
        <description>&lt;p&gt;At a young age I thought that solving algebraic equations on paper was lame. I much prefer working things out mentally and simply put down the value for $x$ in the second step.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align} \frac{\frac{(x^5 + 20x)^2}{log_2(x)} - (\sqrt{\frac{x}{4}}+13x)}{159773} &amp;= (3124x- 23901)(x^2-190) \\ x &amp;= 16 \end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;It is elegant and it made a socially awkward kid feel competent. So I gradually developed the inclination to do everything in my mind. There is something magical about the moment when you arrive at the final answer, the moment when you can let your mind be free as you no longer bear the responsibility to cache the data in your random-access memory. But we are &lt;a href=&quot;https://www.youtube.com/watch?v=PXYeARRyDWk&quot;&gt;humans after all&lt;/a&gt; so we don’t really have RAM and when things get really complicated, we would have to resort to writing the working down. For example, there is no way I can solve the equation above without pen and paper. It is too complex. (Interestingly, even Wolfram Alpha can’t quite solve it, likely a consequence of &lt;a href=&quot;https://en.wikipedia.org/wiki/Abel%E2%80%93Ruffini_theorem&quot;&gt;Abel–Ruffini theorem&lt;/a&gt;: the best it can do is to &lt;a href=&quot;http://www.wolframalpha.com/input/?i=solve+x+in+%28%28%28x%5E5+%2B+20x%29%5E2%29%2F%28log_2%28x%29%29+-+%28%28x%2F4%29%5E%281%2F2%29%2B13x%29%29%2F159773+%3D+%283124x-+23901%29%28x%5E2-190%29+&quot;&gt;use some approximation algorithm&lt;/a&gt;. Perhaps the most efficient approach to obtain a solution for $x$ is through trial and error - checking integers that are some powers of 2 and for which $\sqrt{\frac{x}{4}}$ returns a whole number - but that requires one to have access to the information that $x$ has an integer solution.)&lt;/p&gt;

&lt;p&gt;As humans we can retrieve stored information more efficiently when we receive certain sensory inputs (often in the form of EM radiation or air vibration) that we associated the information with previously. Suppose a person is given the task to compute the product of two random 4 digit numbers. Let’s say the person is not well trained in the art of multiplication, it would be a lot more difficult for her or him to do it mentally than doing it on a piece of scrap paper. Even having the two 4 digit numbers displayed in front of her or him as she or he works on the problem would ease things out slightly, comparing to merely hearing the numbers for once and relying on memories.&lt;/p&gt;

&lt;p&gt;We have already been accustomed to interpreting those Arabic symbols as numbers, a concept in which morphisms can happen. So when we do the morphism (or transformation of abstract entities according to pre-defined rules preserving internal structure) in our mind, it is much easier to recall the information that would be necessary at the next phase by looking at the symbols we have written, than to assign some part of the brain to keep track of the information. It is not that the later cannot be done when the amount of information reaches a certain threshold: &lt;a href=&quot;https://en.wikipedia.org/wiki/Kim_Peek&quot;&gt;Kim Peek&lt;/a&gt; had clearly demonstrated that such threshold does not quite exist. The human brain is a powerful computational device. It’d be more logical to conjecture that in general it tends not to do so as a trade-off to achieve better performance in other areas (e.g. abstract thinking) due to its limited capacity. That is why I believe the ability to forget plays a much more important role than the ability to memorise.&lt;/p&gt;

&lt;p&gt;There are clearly evolutionary advantages in relying on sensory stimuli to retrieve stored information rather than employing other mechanism to be able to retrieve them on a whim. Perhaps this is how the notion of semantics arises at a higher abstraction layer.&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://0a.io/while-working-on-the-conjecture/</link>
        <guid isPermaLink="true">http://0a.io/while-working-on-the-conjecture/</guid>
        
        
      </item>
    
      <item>
        <title>a simple proof for a basic operational equivalence regarding multisets</title>
        <description>&lt;p&gt;Among my favorite Youtube channels is &lt;a href=&quot;https://www.youtube.com/user/njwildberger/&quot;&gt;that of Prof N J Wildberger&lt;/a&gt;, on which he uploads explanatory videos on different topics in mathematics (along with lectures he gave in UNSW). The &lt;a href=&quot;https://youtu.be/alMiaIbxNV4&quot;&gt;latest video is on multisets&lt;/a&gt;, and it happens to be related to what I am currently working with. So I figured I would compose a short proof for the interesting equivalence he pointed out at the 11th minute mark.&lt;/p&gt;

&lt;h3 id=&quot;theorem&quot;&gt;Theorem:&lt;/h3&gt;

&lt;p&gt;For any multisets A and B&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;(A \cup B) + (A \cap B) = A + B&lt;/script&gt;

&lt;h3 id=&quot;proof&quot;&gt;Proof:&lt;/h3&gt;

&lt;p&gt;Firstly, let $a_k$ denote some element in $A$ or $B$ and let’s establish that&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;a_i = a_j \Leftrightarrow i = j&lt;/script&gt;

&lt;p&gt;Now let $n_i$ denote the number of $a_i$ occurring in $(A \cup B)$, &lt;br /&gt;$p_i$ denotes the number of $a_i$ occurring in  $(A \cap B)$, and &lt;br /&gt;$v_i$ to denotes the number of $a_i$ occurring in $(A + B)$.&lt;/p&gt;

&lt;p&gt;The equivalence theorem above can be rewritten as:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;n_i + p_i = v_i \quad \forall i \in I, \text{ where } \\ \bigcup_{i \in I} a_i \text{ is the set of distinct elements in } A \text{ and } B&lt;/script&gt;

&lt;p&gt;According to the definitions of union and intersection between multisets:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;m_{A \cup B}(x) = max( m_A(x), m_B(x)) \\ m_{A \cap B}(x) = max( m_A(x), m_B(x)) \\ \text{where }m_V(x) \text{ denotes the number of element }x \text{ in } V&lt;/script&gt;

&lt;p&gt;we can further rewrite the formula as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\forall x \in X \text{ where } X \text{ is the set of distinct elements in } A \text{ and } B \\ max( m_A(x), m_B(x)) + min( m_A(x), m_B(x)) = m_A(x) + m_B(x) \\&lt;/script&gt;

&lt;p&gt;and that is equivalent as stating&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;max(a,b) + min(a,b) = a + b \quad \forall a,b \in \mathbb{N}&lt;/script&gt;

&lt;p&gt;which is trivially true.&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://0a.io/a-simple-proof-for-a-basic-operational-equivalence-regarding-multisets/</link>
        <guid isPermaLink="true">http://0a.io/a-simple-proof-for-a-basic-operational-equivalence-regarding-multisets/</guid>
        
        
      </item>
    
      <item>
        <title>Don&#39;t underestimate the pigs and their Great Firewall of China</title>
        <description>&lt;p&gt;I stumbled upon &lt;a href=&quot;https://news.ycombinator.com/item?id=10101653&quot;&gt;this comment on HN&lt;/a&gt; today:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I was visiting China recently (my first time there). I thought bypassing The Great Firewall was going to be as simple as an “ssh -D” SOCKS setup, or a “ssh -w” tunnel. Oh boy, I was wrong. If you try this, or even a basic OpenVPN setup, you will quickly find out your VPN works fine for about 5 minutes, but then latency increases to 5sec, 10sec, 30sec(!), and then everything times out. After some research I read online the government does deep packet analysis and uses machine learning to find heuristics to guess which TCP connection or UDP stream is likely being used as a VPN. When they think there is a high probability a VPN is detected, they simply start dropping all the packets.
Encryption is not enough. You need to disguise your VPN traffic to make it look like standard HTTPS sessions (since they don’t block HTTPS). For example in a traditional HTTPS session, if the client browser downloads, say, a 500kB image over HTTPS, it will send periodical empty TCP ACK packets as it receives the data. But when using a VPN that encrypts data at the IP layer, these empty ACK packets will be encrypted, so The Great Firewall will see the client sending small ~80-120 bytes encrypted packets, and will count this as one more sign that this might be a VPN.
That’s why people in China have to use VPN tools that most westerners have never heard of: obfsproxy, ShadowVPN, SoftEther, gohop, etc. All these tools try to obfuscate and hide VPNs. I have a lot of respect for all these Chinese hackers like clowwindy who try to escape censorship, as it takes more technical prowess than you think to design a VPN that works in China.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Everything makes sense now. No wonder I kept getting into some strange time-out with VPN services like VyprVPN, strongVPN, etc, when I was in China one and a half year ago. At first I thought it was because the ISP randomly blocked packages going to overseas servers but apparently it was a lot more sophisticated than that. The Chinese Government is paying vigilant attention to Internet censorship. (Perhaps one reason being that tension is building up in Hong Kong?) Initially I got the impression that it is all just a form of protectionism (you know, that “micro-blog” thingy would not have won against the made-in-harvard-I-am-the-CEO-bitch thingy had it not been the Big Brother’s help). But the pigs are indeed serious about social control as well.&lt;/p&gt;

&lt;p&gt;And yup, recently the Chinese polices just contacted the author of &lt;a href=&quot;https://github.com/shadowsocks&quot;&gt;a popular open-source tool to circumvent the Great Fire Wall of China&lt;/a&gt; and &lt;a href=&quot;https://news.ycombinator.com/item?id=10101469&quot;&gt;politely requested her or him&lt;/a&gt; to stop working on the project and delete the source code on Github. So the author cleaned up the repo &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks&quot;&gt;/shadowsocks/shadowsocks&lt;/a&gt;, although for the repos &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-windows&quot;&gt;/shadowsocks/shadowsocks-windows&lt;/a&gt; and &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-iOS&quot;&gt;/shadowsocks/shadowsocks-iOS&lt;/a&gt; she or he simply created a new branch &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt; and switched to it, so you can still grab the source of latest versions in the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch.&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://0a.io/the-great-firewall-of-China/</link>
        <guid isPermaLink="true">http://0a.io/the-great-firewall-of-China/</guid>
        
        
      </item>
    
      <item>
        <title>A strange little thing about the human conscious awareness about the flow of time</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.google.com.sg/search?q=Ex+Machina&quot;&gt;&lt;em&gt;Ex Machina&lt;/em&gt;&lt;/a&gt;, the greatest motion picture ever produced revolving around the themes of artificial intelligence and human psychology, and one of the very few movies that I actually enjoyed, was just a few buttons away, in the &lt;a href=&quot;https://plex.tv/&quot;&gt;Plex&lt;/a&gt; collection of a friend whom I currently stay with.&lt;/p&gt;

&lt;p&gt;This afternoon while I was eating my cereal I turned on the LCD and let the movie played in the background as I sat lazily on the canapé, enjoying my breakfast in the most leisurely manner possible. It then suddenly hit me that the plot certainly felt as if it was progressing faster than it felt the first time I watched the movie.&lt;/p&gt;

&lt;p&gt;In the blink of an eye the story was already in stage X, that was how it felt like.&lt;/p&gt;

&lt;p&gt;Further introspection suggested that this phenomenon is not limited to just movies, but that there is clearly a discrepancy between our awareness about the flow of time when we re-watched a video for the second time, and that of when we watched it for the first time.&lt;/p&gt;

&lt;p&gt;Is it a consequence of how consistent the neural networks are responding to the ever-changing visual stimuli in according to our intuitive expectation of how they would respond since we have already experienced beforehand what we are experiencing?&lt;/p&gt;

&lt;p&gt;Or perhaps is it because we are prompted to compute what visual stimuli we should expect to receive next, as a response to the ever-changing visual stimuli, and the efficiency of the computation, together with the accuracy of the result, give us a feeling, which, compared to what we previously felt the first time when we watched the video, made us feel like things are going so much smoother and quicker this time?&lt;/p&gt;

&lt;p&gt;It is undeniable that memories affect the way one experiences time. But in the 21st century it remains an open question at to how the brain perceives time.&lt;/p&gt;

&lt;p&gt;Related: &lt;a href=&quot;https://en.wikipedia.org/wiki/Chronostasis&quot;&gt;chronostasis&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://0a.io/a-strange-little-thing-about-human-conscious-awareness-about-the-flow-of-time/</link>
        <guid isPermaLink="true">http://0a.io/a-strange-little-thing-about-human-conscious-awareness-about-the-flow-of-time/</guid>
        
        
      </item>
    
      <item>
        <title>A reasonable model to describe reasons, simplified</title>
        <description>&lt;p&gt;In June I started the &lt;em&gt;Daily Logs of Arch’s&lt;/em&gt; in hopes that I’d be disciplined enough to write on a daily basis. A few days after its inception I &lt;a href=&quot;http://0a.io/halt1/&quot;&gt;took a long break from it&lt;/a&gt; and eventually decided to abandon the whole idea. Surely taking blogging as a hobby and putting down words every day sounds wondrous. But from experience I’m aware that I’m far from being a good writer. I struggle to write. Often, after I have something written, it would have to be edited myriad times before I consider it presentable. If life is an &lt;a href=&quot;https://en.wikipedia.org/wiki/Optimization_problem&quot;&gt;optimization problem&lt;/a&gt; and finding a solution constitutes of how one lives her or his life, let my life be an instance of it, and an efficient algorithm to an &lt;em&gt;optimal solution&lt;/em&gt; in this case certainly would not consist of attempting to master the art of writing. I’d be better off trying to become a mathematician cum computer scientist (which is what I’m pursuing at the moment) since I am the type of anthropic machines that are good at deconstructing thoughts but can hardly remember anything which I have little interest in, and despite the sometimes confusing terminology and not-so-reader-friendly texts that I’ve now and then encountered, I’m glad that CS and maths are becoming an enormous part of my daily life.&lt;/p&gt;

&lt;p&gt;When I don’t see good reasons in doing something, I tend not to do it. That being said, I agree I don’t always behave in such manner, and the same goes to other anthropic machines. Furthermore, even when there are good reasons to do something, we may not do it. Our actions are not entirely reasons-driven.&lt;/p&gt;

&lt;p&gt;Let’s define a mental representation to be a mental construct that demonstrates some relationship between different mental representations. We refer to a mental representation as a &lt;em&gt;reason&lt;/em&gt; when a consequential relationship is established between it and another mental representation (where the former is the “cause” while the later is the “result”).&lt;/p&gt;

&lt;p&gt;Essentially a &lt;em&gt;reason&lt;/em&gt; is just a description to account for the ‘why’ of some mental relationship.&lt;/p&gt;

&lt;p&gt;In the case of actions, &lt;em&gt;reasons&lt;/em&gt; are not the direct cause of them.&lt;/p&gt;

&lt;p&gt;Neurotransmissions occurring at a much lower abstraction layer, as a result of the overall relations between mental representations, are what is truly responsible for our actions. That is to say, according to this model, the attributive relationships gradually established between &lt;em&gt;blogging on a daily basis&lt;/em&gt; and &lt;em&gt;the states of being time consuming, and not important&lt;/em&gt;, together with some other mental relations, are the true causes of the favoring of doing something else over blogging consecutively each day, and eventually the writing of this short essay you are reading.&lt;/p&gt;

&lt;p&gt;No matter how good our mind is at simulating a part of reality and describing things, there is always a gap between the state of mind described by the mind, and the actual state of mind which comprises every mental process including its attempt to describe itself and its attempt to describe how it attempts to describe itself. When it comes to our own actions, there is always a discrepancy between the &lt;em&gt;reasons&lt;/em&gt; we come up with and the actual causes.&lt;/p&gt;

&lt;p&gt;Nonetheless, &lt;em&gt;reasons&lt;/em&gt; appear to have a huge impact on the way mental relationships are constructed, transformed and demolished. They evoke emotions, draw connections and implications (connective and implicational relationships between mental representations), and most importantly, bring forth the notion of logic and make us rational creatures. The ability to reason, or in other words, the ability to construct consequential relationships, is crucial in the development of an intelligent entity. It is reasonably the essence of intelligence.&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://0a.io/on-reason/</link>
        <guid isPermaLink="true">http://0a.io/on-reason/</guid>
        
        
      </item>
    
      <item>
        <title>The Boolean Satisfiability Problem [S&lt;small&gt;AT&lt;/small&gt;] and S&lt;small&gt;AT&lt;/small&gt; solvers in 5 mins* (or&amp;nbsp;more)</title>
        <description>&lt;div class=&quot;row d_shortcuts&quot;&gt;This is a quick sum-up on (and a beginner guide to) the Boolean Satisfiability Problem.&lt;/div&gt;

&lt;p&gt;&lt;small&gt;&lt;sup&gt;*&lt;/sup&gt;In 5 minutes if one skips the introduction and the words in &lt;i&gt;the Blocks of Grey Text&lt;/i&gt;.&lt;br /&gt;
&lt;a id=&quot;blockquoteToggle&quot;&gt;Click here to hide the introduction and all &lt;i&gt; Blocks of Grey Text&lt;/i&gt;.&lt;/a&gt;
&lt;br /&gt;
Word count includes only words &lt;u&gt;not&lt;/u&gt; in &lt;i&gt;the Blocks of Grey Text&lt;/i&gt;.&lt;/small&gt;&lt;/p&gt;

&lt;div id=&quot;introduction&quot;&gt;
&lt;h3 id=&quot;small0th-minutesmall-introduction-small-classwordcount386nbspwordssmall&quot;&gt;&lt;small&gt;0th minute&lt;/small&gt;: Introduction &lt;small class=&quot;wordCount&quot;&gt;382&amp;nbsp;words&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;In CS, when we talk about a &lt;strong&gt;problem&lt;/strong&gt;, we are referring to a set of questions, where each question is an instance of the problem. “Is 7 a prime number?” and “Is 2513414231 a prime number?” are both instances of a problem that can be expressed as: “Is n a prime number?”&lt;/p&gt;

&lt;p&gt;Problems can be classified based on the time or space complexity of the algorithms used to compute an answer for every instance of the problem. Among the most easy-to-understand &lt;strong&gt;NP-complete&lt;/strong&gt; problems is the &lt;strong&gt;Boolean Satisfiability Problem&lt;/strong&gt; (aka S&lt;small&gt;ATISFIABILITY&lt;/small&gt;, or S&lt;small&gt;AT&lt;/small&gt;). &lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Boolean Satisfiability Problem&lt;/strong&gt; is also the first problem proven&lt;sup&gt;{2}&lt;/sup&gt; to be NP-complete. A problem is &lt;b&gt;NP-complete&lt;/b&gt; if it belongs to the set (or &lt;a href=&quot;https://en.wikipedia.org/wiki/Class_(set_theory)&quot;&gt;“class”&lt;/a&gt; if you prefer) of the hardest problems in &lt;strong&gt;NP&lt;/strong&gt; - hardest in the sense that every problem ever exists in NP can be &lt;a href=&quot;https://en.wikipedia.org/wiki/Polynomial-time_reduction&quot;&gt;reduced&lt;/a&gt; to them. (Thus being able to solve a NP-complete problem is equivalent to being able to solve every problem in NP). &lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img style=&quot;max-width:400px&quot; src=&quot;/assets/img/SAT.jpg&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;NP&lt;/strong&gt; is the set of decision problems for which there exists a non-deterministic Turing machine that would output a value 1, or 0, after at most O(n&lt;sup&gt;k&lt;/sup&gt;) steps where k is some constant and n is the complexity of the input. We often refer to such number of steps (or running time) as polynomial, hence Non-deterministic Polynomial time, or NP. &lt;/p&gt;

  &lt;p&gt;A Turing machine is basically a mathematical object that formalizes that idea of algorithm (&lt;a href=&quot;http://www.cs.virginia.edu/~robins/Turing_Paper_1936.pdf&quot;&gt;in Turing model’s of computation&lt;/a&gt;). A non-deterministic Turing machine (NDTM) is, in simple words, a theoretical Turing machine that can, in a sense, engage in all possible computations while taking the same time/step as a deterministic Turing machine. (&lt;a href=&quot;http://www.encyclopediaofmath.org/index.php/Probabilistic_Turing_machine&quot;&gt;Note: nondeterministic doesn’t mean probabilistic.&lt;/a&gt;) &lt;b&gt;One way I like to think about a non-deterministic Turing machine is that it can only exist in a universe where time is a 2 dimensional plane.&lt;/b&gt; A deterministic Turing machine (DTM) on the other hand computes in one-dimension time (and is defined in terms of a &lt;strong&gt;transition function&lt;/strong&gt;, unlike NDTM which relies on a &lt;strong&gt;transition relation&lt;/strong&gt;).&lt;/p&gt;

  &lt;p&gt;Besides the Boolean Satisfiability Problem, the prime factorization problem, “Given $X$ and $N$, where $1&amp;lt; X &amp;lt; N$, is there a $d$ where $X &amp;lt; d &amp;lt; N$ and $d$ a prime factor of $N$?”, is also a problem in &lt;strong&gt;NP&lt;/strong&gt;.&lt;/p&gt;

  &lt;p&gt;Decision problems&lt;sup&gt;{1}&lt;/sup&gt; are problems concerning only with the &quot;trueness&quot; of some statement. That is to say that algorithms for solving decision problems would output either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; (often in binary value). The problem above is a decision problem, and so is the problem “Is X a prime number?”&lt;/p&gt;

  &lt;p&gt;I would be diving deeper into computational complexity in an upcoming essay. If you are interested in theoretical CS, I recommend you checking these out:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0521424267/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0521424267&amp;amp;linkCode=as2&amp;amp;tag=0aarhe-20&amp;amp;linkId=PHEETUYVXM6OG77J&quot;&gt;Computational Complexity: A Modern Approach&lt;/a&gt; (Book)&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/052188473X/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=052188473X&amp;amp;linkCode=as2&amp;amp;tag=0aarhe-20&amp;amp;linkId=PDEIBZRCW7SZRZHB&quot;&gt;Computational Complexity: A Conceptual Perspective&lt;/a&gt; (Book)&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0716710455/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0716710455&amp;amp;linkCode=as2&amp;amp;tag=0aarhe-20&amp;amp;linkId=SAE3OYM4X44YGLQS&quot;&gt;Computers and Intractability: A Guide to the Theory of NP-Completeness&lt;/a&gt; (Book)&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://complexityzoo.uwaterloo.ca/&quot;&gt;Complexity Zoo&lt;/a&gt; (Website)&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://rjlipton.wordpress.com/&quot;&gt;Gödel’s Lost Letter and P=NP&lt;/a&gt; (Website)&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can just think of &lt;b&gt;NP&lt;/b&gt; as the set of problems whose solution can be &lt;b&gt;verified&lt;/b&gt; by an efficient algorithm. And that is different from &lt;b&gt;P&lt;/b&gt;, the set of problems whose solution can be &lt;b&gt;found&lt;/b&gt; by an efficient algorithm. We can easily prove that each problem in P is also in NP, but we are not sure whether it is true that each problem in NP is too in P. &lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt; (P \subseteq NP) \text{ Duh! }  \\ (NP \subseteq P) \text{ ???? }&lt;/script&gt;

&lt;p&gt;Take the prime factorization problem for example. At the moment the most efficient algorithm &lt;a href=&quot;http://www.math.vt.edu/people/brown/doc/briggs_gnfs_thesis.pdf&quot;&gt;(for integers larger than 100 digits)&lt;/a&gt; we can implement into pre-existing computers&lt;sup&gt;{3}&lt;/sup&gt; has a sub-exponential running time. But we can’t say for certainty that the it is not in P. Many brave men and women have tried but failed to come up with a polynomial time algorithm for every instance of the problem. It may simply be the case that we, members of the Human species, are not intelligent enough to design such algorithm. (Or it may be that $NP \not= P$ and the prime factorization problem is simply not in P, in which case we have yet to prove it.)&lt;/p&gt;

&lt;p&gt;If we ever come up with an algorithm that can solve all Boolean Satisfiability Problem in polynomial time, it would mean that $P = NP$ since any problem in NP can be reduced into the Boolean Satisfiability Problem. &lt;a href=&quot;https://news.ycombinator.com/item?id=2121727&quot;&gt;(Here’s a courageous attempt.)&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;statement&lt;sup&gt;{1}&lt;/sup&gt;: More formally, a &lt;strong&gt;decision problem&lt;/strong&gt; is defined as a set of strings, $L$ composed by an alphabet $\Sigma$, where there exists a Turing Machine TM,&lt;/p&gt;

  &lt;script type=&quot;math/tex; mode=display&quot;&gt; x \in L \Leftrightarrow TM(x) = 1&lt;/script&gt;

  &lt;p&gt;So, by the formal definition, &lt;strong&gt;the set of prime numbers is a decision problem&lt;/strong&gt;. And this decision problem is known as PRIMES. In 2002, it was &lt;a href=&quot;https://www.cs.auckland.ac.nz/~msta039/primality_v6.pdf&quot;&gt;proven that PRIMES is in P&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;Here $L$ is often referred to as &lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_language&quot;&gt;a language over $\Sigma$&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;sup&gt;{2}&lt;/sup&gt;: First proven by Cook in his 1971 paper, &lt;a href=&quot;https://www.cs.toronto.edu/~sacook/homepage/1971.pdf&quot;&gt;&lt;em&gt;The complexity of theorem-proving procedure&lt;/em&gt;&lt;/a&gt;. It was later known as the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cook%E2%80%93Levin_theorem&quot;&gt;Cook–Levin theorem&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;sup&gt;{3}&lt;/sup&gt;: By “pre-existing computerese I mean classical ones that don’t rely on quantum mechanics (for computation). The most efficient factorization algorithm we know of in the 21st century is the one described in &lt;a href=&quot;http://arxiv.org/pdf/quant-ph/9508027v2.pdf&quot;&gt;Shor’s 1995 paper&lt;/a&gt;, a super-polynomial time algorithm that makes use of &lt;a href=&quot;https://en.wikipedia.org/wiki/Quantum_Fourier_transform&quot;&gt;quantum Fourier transform&lt;/a&gt;. The sad (or &lt;a href=&quot;https://edwardsnowden.com/2014/01/04/penetrating-hard-targets-and-owning-the-net/&quot;&gt;good&lt;/a&gt;) news is that there yet exists a quantum computer powerful enough to have &lt;a href=&quot;https://en.wikipedia.org/wiki/RSA_problem&quot;&gt;any practical uses of the algorithm&lt;/a&gt;.&lt;/p&gt;

&lt;/blockquote&gt;
&lt;/div&gt;

&lt;h3 id=&quot;small1st-minutesmall-what-is-the-boolean-satisfiability-problem-small-classwordcount334nbspwordssmall&quot;&gt;&lt;small&gt;1st minute&lt;/small&gt;: What is the Boolean Satisfiability Problem? &lt;small class=&quot;wordCount&quot;&gt;334 words&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;Boolean Satisfiability Problem&lt;/strong&gt; (or S&lt;small&gt;AT&lt;/small&gt;) is the problem of determining if a proposition statement&lt;sup&gt;*&lt;/sup&gt; is &lt;strong&gt;satisfiable&lt;/strong&gt;. A propositional statement is satisfiable when it is possible to assign some true-false values for the variables in the statement such that the statement yields &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;. Otherwise the statement is unsatisfiable.&lt;/p&gt;

&lt;p&gt;A propositional statement is simply a string made up of variables, brackets and these 3 symbols:&lt;/p&gt;

&lt;div class=&quot;row d_shortcuts text-center&quot;&gt;
$\neg$ with the meaning &lt;i&gt;not&lt;/i&gt;.&lt;br /&gt; $\neg True = False $&lt;br /&gt;
$\land$ with the meaning &lt;i&gt;and&lt;/i&gt;.&lt;br /&gt; $ False \land True = False $&lt;br /&gt;
$\lor$ with the meaning &lt;i&gt;or&lt;/i&gt;.&lt;br /&gt; $ False \lor True = True $ &lt;br /&gt;
&lt;/div&gt;

&lt;p&gt;These symbols are also known as logical connectives. They’re arranged in the order of precedence above. Here is an example of a propositional statement:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;d \lor (a \land b \land (c \lor d \land \neg a))&lt;/script&gt;

&lt;p&gt;And here is an instance of The Boolean Satisfiability Problem:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\text{Is }d \lor (a \land b \land (c \lor d \land \neg a)) \text{ satisfiable?}&lt;/script&gt;

&lt;p&gt;The answer is yes, it is satisfiable. One solution:&lt;/p&gt;

&lt;div class=&quot;row d_shortcuts&quot;&gt;
$a$ assigned: Any value&lt;br /&gt;
$b$ assigned: Any value&lt;br /&gt;
$c$ assigned: Any value&lt;br /&gt;
$d$ assigned: True&lt;br /&gt;
&lt;/div&gt;

&lt;p&gt;Meanwhile, the answer to the question&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\text{Is } a \land \neg a \land b \land c \land d \text{ satisfiable?}&lt;/script&gt;

&lt;p&gt;is no, it is unsatisfiable. That is because there is no value we can assign to $a$ such that $a \land \neg a$ would yield &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;, and therefore it is impossible for the entire statement to yield &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;sup&gt;*&lt;/sup&gt;: More technically, it is known as a “formula” or “wff” (“well-formed formula”). “Well-formed” in the sense that it is syntactically correct such that it can be interpreted in our context. “Formula” in the sense that it is something formed by putting symbols together.&lt;/p&gt;

  &lt;script type=&quot;math/tex; mode=display&quot;&gt;wff \subset statement&lt;/script&gt;

  &lt;p&gt;”$\land\land\land A \land \lor B B B$” for example is a statement but not a formula since it is not well-formed.&lt;/p&gt;

  &lt;p&gt;p.s. In order to know how the symbol works here we rely on its association with the meaning of some lexical item in English, like the word “not” in the case of $\neg$, and our intuitive understanding of how “not” functions. We need to keep in mind that the symbols by themselves have no absolute meaning: some are even interpreted differently in different systems of logic (&lt;a href=&quot;http://ncatlab.org/nlab/show/classical+logic&quot;&gt;classical logic&lt;/a&gt; vs &lt;a href=&quot;http://ncatlab.org/nlab/show/intuitionistic+logic&quot;&gt;intuitionistic logic&lt;/a&gt; for example). But that is outside of the scope of this essay, and so for the moment let’s just take it as that these symbols indeed mean what the words mean.&lt;/p&gt;

  &lt;p&gt;p.s. Often in proposition logic, you would encounter these symbols as well:&lt;/p&gt;

  &lt;div class=&quot;row d_shortcuts text-center&quot;&gt; $\Rightarrow$ with the meaning &lt;i&gt;imply (if .. then ..) &lt;/i&gt;. [$\Leftarrow$ for different direction]&lt;br /&gt; $ (False \Rightarrow True) = True $&lt;sup&gt;{4}&lt;/sup&gt;&lt;br /&gt;
$\Leftrightarrow$ with the meaning &lt;i&gt;if and only if (two-way implication)&lt;/i&gt;.&lt;br /&gt;$ (False \Leftrightarrow True) = False $ &lt;/div&gt;

  &lt;p&gt;They are omitted because statements that use these symbols can be rewritten using the basic Boolean operations: $\lor$, $\land$, and $\neg$.&lt;/p&gt;

  &lt;script type=&quot;math/tex; mode=display&quot;&gt;a \Rightarrow b \text{ can be rewritten as } \neg a \lor b  \\ \text{without changing its satisfiability}&lt;/script&gt;

  &lt;p&gt;Since our main concern is satisfiability here, we’d like to be minimalist, and exclude symbols from our alphabet that are not necessary.&lt;/p&gt;

  &lt;p&gt;p.s. In model theory, we can view the assignment of booleans values to the variables in a statement as &lt;strong&gt;an interpretation&lt;/strong&gt; of the statement, and we write&lt;/p&gt;

  &lt;script type=&quot;math/tex; mode=display&quot;&gt;I \models F&lt;/script&gt;

  &lt;p&gt;where $I$ is the interpretation and $F$ is the statement (or more technically, formula&lt;sup&gt;{1}&lt;/sup&gt;) and we say $I$ is a model of $F$. With this in mind, we can say that two formulas $F_1$ and $F_2$ are equivalent as long as each model of A is a model of B, and vice versa.&lt;/p&gt;

  &lt;script type=&quot;math/tex; mode=display&quot;&gt;F_1 \equiv F_2 \Leftrightarrow (\forall I (I \models F_1) \Leftrightarrow (I \models F_2))&lt;/script&gt;

&lt;/blockquote&gt;

&lt;p&gt;S&lt;small&gt;AT&lt;/small&gt; is a member of problems known as the &lt;strong&gt;Constraint Satisfaction Problems (or CSPs)&lt;/strong&gt;. CSP is basically a generalization of S&lt;small&gt;AT&lt;/small&gt;, where the followings are both to be defined:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;the values a variable can be assigned to (often referred to as &lt;em&gt;domain&lt;/em&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the constraints on what makes a satisfiable statement&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Another member of CSPs is the &lt;a href=&quot;http://www.eecs.berkeley.edu/~sseshia/pubdir/SMT-BookChapter.pdf&quot;&gt;&lt;strong&gt;Satisfiability Modulo Theories Problem (or SMT)&lt;/strong&gt;&lt;/a&gt;, where, instead of proposition statements (like what we are dealing with in S&lt;small&gt;AT&lt;/small&gt;), it is the problem of determining the satisfiability of first-order logic statements, and whether a first-order logic statement is satisfiable depends on the theory of our choice.&lt;/p&gt;

&lt;p&gt;Let’s say the theory of our choice is linear arithmetic, we would say that the statement below is satisfiable if variables can take in any value in $\mathbb{R}$, the set of real numbers.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;2a + 4b = 7&lt;/script&gt;

&lt;p&gt;It is, however, unsatisfiable if we define $\mathbb{Z}$, the set of integers, to be the domain instead.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt; ● ● ● &lt;/p&gt;

&lt;h3 id=&quot;extra-small-classwordcountskip-this-if-you-want-213nbspwordssmall&quot;&gt;Extra &lt;small class=&quot;wordCount&quot;&gt;(skip this if you want) 213 words&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;When a satisfiable statement always yields &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; no matter what the value the variables take (every set of true-false assignments to the variables is a solution), we call it a &lt;strong&gt;tautology&lt;/strong&gt;. Here is one:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;a \lor \neg a&lt;/script&gt;

&lt;p&gt;Interestingly, the problem of determining if some statement is not a tautology can be easily reduced into the Boolean Satisfiability Problem.&lt;/p&gt;

&lt;p&gt;Since a tautology always yields &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;, negating a tautology would give us a statement that always yields &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;, and that, my friend, is an unsatisfiable statement. The problem of determining if some statement, V, is not a tautology is thus equivalent to the problem of determining if the negation of the statement, V, is satisfiable. And that means the “Not-Tautology problem” is also in NP.&lt;/p&gt;

&lt;p&gt;On the other hand, the Boolean Unsatisfiability Problem is in what’s known as &lt;b&gt;co-NP&lt;/b&gt;, and so is the problem of determining if a statement is a tautology.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;co-NP&lt;/strong&gt; can be thought of as the set of problems whose non-solution can be verified efficiently using a Non-Deterministic Turing Machine. At the moment “NP = co-NP?” remains an open question.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Formally, a co-NP problem is a language&lt;sup&gt;*&lt;/sup&gt; over some alphabet Σ, for which there exists Non-Deterministic Turing Machine that would output 0 in polynomial time, after taking in any string from the language as input.&lt;/p&gt;

  &lt;p&gt;Note that that is different from a definition of a NP problem, a language&lt;sup&gt;*&lt;/sup&gt; for which there exists exists Non-Deterministic Turing Machine that would output 1 in polynomial time, after taking in any string from the language as input.&lt;/p&gt;

  &lt;p&gt;* : If you are confused by the usage of the word “language”, read {1} (in the &lt;em&gt;block of Grey Text&lt;/em&gt;) in 0th minute: Introduction.&lt;/p&gt;

  &lt;p&gt;All problems in P are in (NP $\cap$ co-NP). Among other known problems in (NP $\cap$ co-NP) is the prime factorization problem.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p class=&quot;text-center&quot;&gt; ● ● ● &lt;/p&gt;

&lt;p&gt;From the 2nd minute on we’d be&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;using the word &lt;strong&gt;formula&lt;/strong&gt; (instead of “statement”) [For the reason, see &lt;sup&gt;{1}&lt;/sup&gt; in 1st minute: What is the Boolean Satisfiability Problem? if you haven’t]&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;using &lt;strong&gt;S&lt;small&gt;AT&lt;/small&gt;&lt;/strong&gt; as the abbreviation for the Boolean Satisfiability Problem&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;small2nd-minutesmall-classifying-ssmallatsmall-small-classwordcount354nbspwordssmall&quot;&gt;&lt;small&gt;2nd minute:&lt;/small&gt; Classifying S&lt;small&gt;AT&lt;/small&gt; &lt;small class=&quot;wordCount&quot;&gt;354 words&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;We can classify instances of S&lt;small&gt;AT&lt;/small&gt; based on what form the formulas are in.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3S&lt;small&gt;AT&lt;/small&gt;&lt;/strong&gt; is the instances of S&lt;small&gt;AT&lt;/small&gt; where the formulas are in the form&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\bigwedge_{j \in J} ( a_j \lor b_j \lor c_j )&lt;/script&gt;

&lt;p&gt;where $a_j,b_j,c_j$ are called &lt;strong&gt;literals&lt;/strong&gt;. A literal is either an atomic formula or its negation. One example:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;( x \lor \neg y \lor \neg x ) \land ( x \lor \neg x \lor z )&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;An atomic formula is a formula that has no deeper structure: such as “$a$” in “$a \land b$”.&lt;/p&gt;

  &lt;p&gt;$\bigwedge$ works the same as a loop. We can arrive at the formula above by taking $J = \{ 1,2 \} \text{ and }a_1 = a_2 = x, b_1 = \neg y, b_2 = c_1 = \neg x, c_2 = z $.&lt;/p&gt;

  &lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align} &amp;\bigwedge_{j \in J} ( a_j \lor b_j \lor c_j )  \\ =&amp; ( a_1 \lor b_1 \lor c_1 ) \land ( a_2 \lor b_2 \lor c_2 ) \\ =&amp; ( x \lor \neg y \lor \neg x ) \land ( x \lor \neg x \lor z ) \\ \end{align} %]]&gt;&lt;/script&gt;

&lt;/blockquote&gt;

&lt;p&gt;This is also known as the &lt;b&gt;Conjunctive&lt;sup&gt;{1}&lt;/sup&gt; Normal Form (CNF)&lt;/b&gt;. To be more precise, the form above is called &lt;b&gt;3CNF&lt;/b&gt; (because it has 3 literals in each clause&lt;sup&gt;{2}&lt;/sup&gt;). &lt;b&gt;kCNF&lt;/b&gt; is the type of CNF with k number of literals in each clause.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}  \bigwedge_{j \in J} ( a_j \lor b_j \lor c_j ) &amp;\text{ is 3CNF} \\ \bigwedge_{j \in J} ( a_j \lor b_j) &amp;\text{ is 2CNF}  \end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;More generally, any formula is in CNF as long as it’s of the form:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\bigwedge \bigvee x \text{ is CNF}&lt;/script&gt;

&lt;p&gt;Clauses in a general CNF formula need not contain the same number of literals. Examples:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;( a \lor b) \land ( c \lor d ) \land (a \lor c \lor b \lor \neg b) \land (\neg a \lor c \lor d) \\ ( a \lor b ) \land c&lt;/script&gt;

&lt;p&gt;Instances of S&lt;small&gt;AT&lt;/small&gt; on statements in &lt;strong&gt;&lt;em&gt;k&lt;/em&gt;CNF&lt;/strong&gt; are called &lt;strong&gt;&lt;em&gt;k&lt;/em&gt;S&lt;small&gt;AT&lt;/small&gt;&lt;/strong&gt;, where &lt;em&gt;k&lt;/em&gt; is a natural number. Great thing about 3S&lt;small&gt;AT&lt;/small&gt; is that all instances of S&lt;small&gt;AT&lt;/small&gt; are &lt;a href=&quot;http://web.mit.edu/~neboat/www/6.046-fa09/rec8.pdf&quot;&gt;reducible&lt;/a&gt; into 3S&lt;small&gt;AT&lt;/small&gt;. And that means 3S&lt;small&gt;AT&lt;/small&gt; is also NP-complete. &lt;strong&gt;2S&lt;small&gt;AT&lt;/small&gt;&lt;/strong&gt;, on the other hand, is S&lt;small&gt;AT&lt;/small&gt; in 2CNF and it is not NP-complete.&lt;/p&gt;

&lt;p&gt;2S&lt;small&gt;AT&lt;/small&gt; is in P (and &lt;a href=&quot;https://en.wikipedia.org/wiki/NL-complete&quot;&gt;NL-complete&lt;/a&gt;) and not all instances of S&lt;small&gt;AT&lt;/small&gt; can be reduced into 2S&lt;small&gt;AT&lt;/small&gt; (or else we can conclude that P = NP).&lt;/p&gt;

&lt;p&gt;Lastly, we shall talk about &lt;strong&gt;HORN-S&lt;small&gt;AT&lt;/small&gt;&lt;/strong&gt;, instances of S&lt;small&gt;AT&lt;/small&gt; with Horn formula. When each clause contains at most 1 positive literal, we call it a &lt;strong&gt;Horn&lt;sup&gt;{3}&lt;/sup&gt; formula&lt;/strong&gt;. Here are some examples:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;( a \lor \neg b) \land ( c \lor \neg d ) \land (\neg a \lor \neg c \lor \neg b) \land \neg x \\ x \land y \land z \land (\neg d \lor \neg x \lor \neg i \lor \neg y) \\ ( a \lor \neg b ) \land c&lt;/script&gt;

&lt;div class=&quot;text-center&quot;&gt;
&lt;img style=&quot;max-width:300px&quot; src=&quot;/assets/img/such horn.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Not only is Horn-S&lt;small&gt;AT&lt;/small&gt; in P (just like 2S&lt;small&gt;AT&lt;/small&gt;), it is also &lt;a href=&quot;https://en.wikipedia.org/wiki/P-complete&quot;&gt;P-complete&lt;/a&gt;, and &lt;a href=&quot;http://www.sciencedirect.com/science/article/pii/0743106684900141&quot;&gt;solvable in linear time&lt;/a&gt;. (&lt;a href=&quot;http://cs.stackexchange.com/questions/45002/is-horn-sat-in-lin-if-so-why-is-that-not-an-indication-that-p-lin&quot;&gt;That doesn’t mean P = LIN though.&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;&lt;sup&gt;{1}&lt;/sup&gt; Conjunctive since it’s formed by $\land$. It yields &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; if one of its clauses yields &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;sup&gt;{2}&lt;/sup&gt;: Formally a &lt;strong&gt;clause&lt;/strong&gt; is defined to be a &lt;strong&gt;disjunction&lt;/strong&gt; of literal:&lt;/p&gt;

  &lt;p&gt;Dejunctive since it’s formed by $\lor$. It yields &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; if one of its literals yields &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;sup&gt;{3}&lt;/sup&gt; Initially in propositional logic, a Horn clause is in the form&lt;/p&gt;

  &lt;script type=&quot;math/tex; mode=display&quot;&gt;(\bigwedge_{a \in A} a) \Rightarrow b&lt;/script&gt;

  &lt;p&gt;In S&lt;small&gt;AT&lt;/small&gt;, since we don’t use the $\Rightarrow$ symbol, the above is re-written as:&lt;/p&gt;

  &lt;script type=&quot;math/tex; mode=display&quot;&gt;b \lor (\bigvee_{a \in A} \neg a )&lt;/script&gt;

  &lt;p&gt;or in the case that $b$ is an absolute &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;, we have $(\bigwedge_{a \in A} a) \Rightarrow True$, which gives us&lt;/p&gt;

  &lt;script type=&quot;math/tex; mode=display&quot;&gt;\bigvee_{a \in A} \neg a&lt;/script&gt;

  &lt;p&gt;or in the case that $\bigvee_{a \in A}$ is an absolute &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;, we have $True \Rightarrow b$, giving us&lt;/p&gt;

  &lt;script type=&quot;math/tex; mode=display&quot;&gt;b&lt;/script&gt;
&lt;/blockquote&gt;

&lt;p&gt;This pretty much sums up generally how instances of S&lt;small&gt;AT&lt;/small&gt; are classified. If you are interested in classifying S&lt;small&gt;AT&lt;/small&gt; in a more ‘hard core’ manner (viewing S&lt;small&gt;AT&lt;/small&gt; itself as a classification problem), &lt;a href=&quot;http://www.cs.ucc.ie/~osullb/pubs/classification.pdf&quot;&gt;check out this 2008 paper by David Devlin and Barry O’Sullivan&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perhaps you’ve also heard of problems with names like &lt;a href=&quot;https://en.wikipedia.org/wiki/MAX-3SAT&quot;&gt;MAXS&lt;small&gt;AT&lt;/small&gt;&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Sharp-SAT&quot;&gt;#S&lt;small&gt;AT&lt;/small&gt;&lt;/a&gt;. Instances of these problems are not really instances of S&lt;small&gt;AT&lt;/small&gt;; it’d be more accurate to say that they are variations of S&lt;small&gt;AT&lt;/small&gt;. MAXS&lt;small&gt;AT&lt;/small&gt; is the problem of finding a boolean assignment satisfying most clauses in a CNF formula, and #S&lt;small&gt;AT&lt;/small&gt; is the problem of counting the number of satisfying assignments.&lt;/p&gt;

&lt;h3 id=&quot;small3rd-minute-small-ssmallatsmall-solvers---general-overview-small-classwordcount337nbspwordssmall&quot;&gt;&lt;small&gt;3rd minute :&lt;/small&gt; S&lt;small&gt;AT&lt;/small&gt; Solvers - General Overview &lt;small class=&quot;wordCount&quot;&gt;337 words&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;There are many known algorithms capable of solving some (but not all) instances of S&lt;small&gt;AT&lt;/small&gt; pretty efficiently. We often refer to them as &lt;b&gt;S&lt;small&gt;AT&lt;/small&gt; solvers&lt;/b&gt;. In general they can be classified into &lt;strong&gt;complete&lt;/strong&gt; or &lt;strong&gt;incomplete&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Complete S&lt;small&gt;AT&lt;/small&gt; solvers would always return either &lt;code class=&quot;highlighter-rouge&quot;&gt;satisfiable&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;unsatisfiable&lt;/code&gt;. Incomplete S&lt;small&gt;AT&lt;/small&gt; solvers, on the other hand, are less reliable - they may be unable to prove unsatisfiability (when it’s impossible for the formula to yield &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;), or unable to find a solution when the formula is satisfiable - but perhaps a lot more useful in scenarios when the instances of S&lt;small&gt;AT&lt;/small&gt; cannot be solved by complete algorithms in reasonable time.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To make thing simpler S&lt;small&gt;AT&lt;/small&gt; solvers normally take in formulas in CNF form encoded in &lt;a href=&quot;http://www.satcompetition.org/2009/format-benchmarks2009.html&quot;&gt;DIMACS&lt;/a&gt; format as inputs. Suppose we have a formula that isn’t in CNF form, we would first &lt;a href=&quot;http://stackoverflow.com/a/11582917/2041954&quot;&gt;convert it into CNF form&lt;/a&gt; before inputting it into a S&lt;small&gt;AT&lt;/small&gt; solver.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To compare the performance between different S&lt;small&gt;AT&lt;/small&gt; solvers, we give them a large set of formulas and see how well each performs (e.g. by the total time taken, or number of formulas solved in n-minutes, or using &lt;a href=&quot;http://link.springer.com/chapter/10.1007%2F978-3-642-21581-0_25#page-1&quot;&gt;a methodology called &lt;em&gt;careful ranking&lt;/em&gt;&lt;/a&gt;). The set of formulas is often referred to as a benchmark instance. A solver previously lost to another solver may do better if different type of benchmark instances are used.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;http://satcompetition.org/2014/index.shtml&quot;&gt;the S&lt;small&gt;AT&lt;/small&gt; 2014 competition&lt;/a&gt;, &lt;a href=&quot;http://fmv.jku.at/lingeling/&quot;&gt;Lingeling&lt;/a&gt; beat all the other solvers when evaluated using application-type benchmark instances, but lose to &lt;a href=&quot;http://www.labri.fr/perso/lsimon/glucose/&quot;&gt;glucose&lt;/a&gt; when hard-combinatorial-type are used.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Due to the NP-complete nature of S&lt;small&gt;AT&lt;/small&gt;, we can use S&lt;small&gt;AT&lt;/small&gt; solvers to solve real world problems in areas like circuit design (for &lt;a href=&quot;http://www.cise.ufl.edu/~zhuang/doc/TR-05.pdf&quot;&gt;Combinational Equivalence Checking&lt;/a&gt;), and artificial intelligence  (for &lt;a href=&quot;http://users.ics.aalto.fi/rintanen/jussi/papers/Rintanen11aaai.pdf&quot;&gt;Automated Planning and Scheduling&lt;/a&gt;). Application-type benchmark instances consist of formulas from real world problems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Many modern S&lt;small&gt;AT&lt;/small&gt; solvers are based on the original &lt;strong&gt;DPLL&lt;/strong&gt; algorithm designed in the 60’s. In summary, DPLL is a complete algorithm that works by assigning a variable some boolean value, checks if this breaks the overall satisfiability: if it doesn’t break, pick a new variable, and check again; if it breaks, alters the assigned value and check again (if both True-False values are tried, go back to the previous variable, alter it and check). Repeatedly doing so until we arrive at either one of these two ends:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;All variables are assigned to some boolean value and it does not break the overall satisfiability, and hence the formula is satisfiable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;No matter what boolean values a set of variables are assigned to, it would break the overall satisfiability, and hence the formula is unsatisfiable.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;small4th-and-5th-minutes-small-ssmallatsmall-solvers---dpll-and-more-small-classwordcount613nbspwordssmall&quot;&gt;&lt;small&gt;4th and 5th minutes :&lt;/small&gt; S&lt;small&gt;AT&lt;/small&gt; Solvers - DPLL and More &lt;small class=&quot;wordCount&quot;&gt;613 words&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;You may have already imagined, DPLL is basically a &lt;a href=&quot;https://www.youtube.com/watch?v=bkROCj-BTWE&quot;&gt;depth-first search&lt;/a&gt;, and that means at its heart it uses &lt;strong&gt;backtracking&lt;/strong&gt;, a brute-force-like technique that, rather than checking every single possible solution one by one (which is what’s known as brute-force), it checks possible solutions by compositing part by part in a combinatorial fashion [e.g. building a solution variable by variable as described above], discarding sets of solutions that are deemed invalid by parts.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In short, &lt;strong&gt;a backtracking algorithm is very similar to a classical brute-force algorithm, except that it is slightly smarter and thus more efficient&lt;/strong&gt;. Here is an example. Imagine you are given 9 numbers&lt;/p&gt;

  &lt;script type=&quot;math/tex; mode=display&quot;&gt;4015,1635,8744,1236,3241,123,6126,142,13421&lt;/script&gt;

  &lt;p&gt;and your task is to find if there is a set of $n$ numbers adding up to a prime number $x$ where $n &amp;gt; 3$ and $x &amp;lt; 14000$. One example of an algorithm that uses backtracking would firstly&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;form a set of 3 numbers (e.g. first 3 numbers $4015,1635,8744$)&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;get its sum (in this case $4015+1635+8744=14394$ )&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;check if it makes sense to go on adding more numbers into this set of 3 numbers.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;In our case $14394&amp;gt;14000$, so it makes no sense to go on and we abandon the last number, 8744, in our set, makes a new set of 3 numbers $4015,1635,1236$, and do the same thing to check if it makes sense to go on (in this case $4015+1635+1236=6886$). Since it did not exceed the limit of 14000, we continue to&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;add a new number into the the set&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;get its sum (in this case it didn’t exceed 14000. We can continue)&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;now that $n&amp;gt;3$ (we have 4 numbers), we check if it is prime: if not we add more numbers to it (repeat step 1)&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;once we exceed the limit we abandon the last number just like before (and hence &lt;em&gt;backtracking&lt;/em&gt;)… Keep doing so until we have&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;either tried every sensible combination (sum &amp;lt; 14000), but there is no prime&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;or we arrive at a solution, a set of numbers that meets our criteria.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;Read up on &lt;a href=&quot;https://en.wikipedia.org/wiki/Eight_queens_puzzle&quot;&gt;the Eight queens puzzle&lt;/a&gt; and its backtracking algorithm and you’d have a complete grasp of the concept (if you haven’t).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The other 2 techniques classical DPLL uses are&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;pure literal elimination&lt;/strong&gt;: The idea is simple. If a literal appears only as positive or negative (but not both, and hence we call it &lt;strong&gt;pure&lt;/strong&gt;) in the formula,&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;we assign a value to the literal for it to yield &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;and delete all the clauses which contain it in the formula.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;blockquote&gt;
      &lt;p&gt;This is because since it is pure, we can just make it yield &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; and it won’t have any other consequence to the overall satisfiable.&lt;/p&gt;

      &lt;script type=&quot;math/tex; mode=display&quot;&gt;(a \lor b \lor \neg c) \land (a \lor \neg b) \land ( b \lor \neg c)&lt;/script&gt;

      &lt;p&gt;In the formula above, $a$ and $c$ are both pure, so we can give $a = True$ and $c = False$, and delete all the clauses that contain them. After that we’d end up with no clauses. And that means the formula is satisfiable with&lt;/p&gt;

      &lt;div class=&quot;row d_shortcuts&quot;&gt;
   $a$: True&lt;br /&gt;
   $b$: Any value&lt;br /&gt;
   $c$: False&lt;br /&gt;
   &lt;/div&gt;

    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;unit propagation&lt;/strong&gt;: It is obvious that for clauses made up of 1 literal, that 1 literal has to evaluate &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; for the formula to yield &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;. Therefore&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;we assign a value for the literal to yield &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;delete clauses that contains the literal, and instances of it in opposite polarity (the opposite of positive is negative, vice versa).&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Take this CNF for example:&lt;/p&gt;

      &lt;script type=&quot;math/tex; mode=display&quot;&gt;a \land (a \lor x \lor y) \land ( \neg a \lor \neg b) \land (c \lor b ) \land (d \lor \neg b)&lt;/script&gt;

      &lt;p&gt;After 1st round of unit propagation, we would have $a = True$ and, after reduce the original forumla to:&lt;/p&gt;

      &lt;script type=&quot;math/tex; mode=display&quot;&gt;\neg b \land (c \lor b ) \land (d \lor \neg b)&lt;/script&gt;

      &lt;p&gt;Great! We can do a 2nd round of unit propagation with $\neg b$: make $b = False$ and reduce it into:&lt;/p&gt;

      &lt;script type=&quot;math/tex; mode=display&quot;&gt;c&lt;/script&gt;

      &lt;p&gt;And here we have it, the original formula is satisfiable with&lt;/p&gt;

      &lt;div class=&quot;row d_shortcuts&quot;&gt;
   $a$: True&lt;br /&gt;
   $b$: False&lt;br /&gt;
   $c$: False&lt;br /&gt;
   $d$: Any value&lt;br /&gt;
   &lt;/div&gt;

      &lt;p class=&quot;text-center&quot;&gt; ● ● ● &lt;/p&gt;

      &lt;p&gt;When we end up in a situation where there is an &lt;strong&gt;empty clause&lt;/strong&gt; (a clause with 0 literals), it indicates that there is a set of variables no matter what value we assign them, we can’t satisfy the formula. And thus it is unsatisfiable.&lt;/p&gt;

      &lt;p&gt;Here is an example where after one round of unit propagation, we’d have an empty clause, indicating that no matter what values we assign $a$ and $b$, it won’t satisfy the formula.&lt;/p&gt;

      &lt;script type=&quot;math/tex; mode=display&quot;&gt;a \land b \land (\neg b \lor \neg a) \land (c \lor b \lor d) \land (d \lor a)&lt;/script&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;More technically, we would say that unit propagation and pure literal elimination are used at each &lt;strong&gt;decision level&lt;/strong&gt;. We start off at decision level 0, and the decision level increases by 1 each time as we assign a boolean value to a variable.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We often call such variable “assigned variable”. And that is different from “implied variables”, variables that get their values from pure literal elimination and unit propagation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is a simple implementation of classical DPLL in Haskell:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.List&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Satisfiability&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SAT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UNSAT&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Literal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Clause&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Literal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VariableAssignement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;--extract variable from literal&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Literal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Variable&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exv&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;exvWithValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Literal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VariableAssignement&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exvWithValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;assignTrueFor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assignTrueFor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;literal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;literal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clause&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clause&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;literal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hasConflict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dpll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;VariableAssignement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Satisfiability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;VariableAssignement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dpll&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasConflict&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UNSAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enterDecisionLevelWAL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SAT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enterDecisionLevelWAL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- enterDecisionLevelWAL: enter Decision Level With Assigned Literal&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enterDecisionLevelWAL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theVariable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_up_and_ple&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assignTrueFor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exvWithValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dpll&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- do_up_and_ple: do unit propagation &amp;amp;&amp;amp; pure literal elimination&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;do_up_and_ple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;VariableAssignement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Satisfiability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;VariableAssignement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;do_up_and_ple&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dpll&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vs&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnf&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&#39;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vs&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnf&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up_and_ple&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;up_and_ple&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_if_ple_gets_same_result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ple&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&#39;&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ple&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;check_if_ple_gets_same_result&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up_and_ple&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- pure literal elimination&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ple&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vs&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnf&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnf&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assignTrueFor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pls&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vs&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exv&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;as&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exvWithValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nubBy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find_pure_literals&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;literals&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;literals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnf&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;find_pure_literals&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find_pure_literals&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&#39;&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;o&#39;&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;literals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;literals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;literals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;find_pure_literals&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- unit propagation&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ucs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vs&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnf&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnf&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assignTrueFor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ucs&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;as&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exvWithValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ucs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vs&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exv&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ucs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ucs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dpllStart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Satisfiability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;VariableAssignement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dpllStart&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_up_and_ple&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To run it, simply invoke &lt;code class=&quot;highlighter-rouge&quot;&gt;dpllStart&lt;/code&gt; with a parameter in the form &lt;code class=&quot;highlighter-rouge&quot;&gt;([Int], [[Int]])&lt;/code&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;(a \lor b) \land (a \lor c ) \land (c \lor -d) \\ \text{would be ([1,2,3],[[1,2],[1,3],[3,-4]])}&lt;/script&gt;

&lt;p&gt;and it would return either &lt;code class=&quot;highlighter-rouge&quot;&gt;UNSAT&lt;/code&gt; with an empty list or &lt;code class=&quot;highlighter-rouge&quot;&gt;SAT&lt;/code&gt; with a list of boolean assignments.&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;I’ve integrated a parser for parsing CNF formula in &lt;a href=&quot;http://www.satcompetition.org/2009/format-benchmarks2009.html&quot;&gt;DIMACS format&lt;/a&gt; into the implementation above.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/0a-/Haskell-DPLL-SAT-Solver&quot;&gt;It’s available on GitHub.&lt;/a&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;Below is DPLL in pseudo-code with JavaScript-like syntax. (I have omitted the array that stores variable assignments.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dpll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formula&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formula&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;empty_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;UNSAT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formula&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SAT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formula&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;formula&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;new_formula&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formula&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;new_formula&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assignVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doUPandPLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;new_formula&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;UNSAT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;formula&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assignVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;do_up_and_ple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formula&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doUPandPLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//LiteralElmination &amp;amp; UnitPropagation would remove elements in f.variables&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//as they make changes to the formula&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;repeatedlyDo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PureLiteralElmination&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;repeatedlyDo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UnitPropagation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ifDoPureLiteralElminationCanMakeChanges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dpll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;text-center&quot;&gt; ● ● ● &lt;/p&gt;

&lt;p&gt;To improve the performance of a S&lt;small&gt;AT&lt;/small&gt; solver, we can use a &lt;strong&gt;heuristic function&lt;/strong&gt; to determine which variable to assign a boolean value to in each decision (rather than following a fixed order). We often refer to it as a &lt;strong&gt;decision heuristic&lt;/strong&gt;. One example is &lt;strong&gt;VSIDS&lt;/strong&gt; introduced in &lt;a href=&quot;http://www.princeton.edu/~chaff/software.html&quot;&gt;CHAFF&lt;/a&gt;, a S&lt;small&gt;AT&lt;/small&gt; solver that won the 2006’s S&lt;small&gt;AT&lt;/small&gt; competition.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We call something &lt;strong&gt;heuristic&lt;/strong&gt; often when there is not much rigorous maths behind it so it does not guaranteed to be optimal or perfect but it works well after some tests and that is the main reason why it is being implemented &amp;amp; used. Usually, a heuristic function (or algorithm) is characterized by being simple, quick and effective.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The idea of VSIDS is simple: a variable is chosen for each decision according a ranking of these variables that changes over time. Each variable is ranked by its “activity score”, a floating point variable that would plus some constant, $C$, every time the variable shows up in a newly generated clause through a process called “conflict clause learning”. Every now and then, activity scores would be divided by another constant, $N$, hence shrinking over time, and “decaying” in the sense. For that reason, it is called VSIDS: Variable State Independent Decaying Sum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To learn more about VSIDS you can check out &lt;a href=&quot;http://arxiv.org/pdf/1506.08905v1.pdf&quot;&gt;Understanding VSIDS Branching Heuristics
in Conflict-Driven Clause-Learning S&lt;small&gt;AT&lt;/small&gt; Solvers&lt;/a&gt; and &lt;a href=&quot;https://classes.soe.ucsc.edu/cmps217/Fall07/Project/jaeheon/final_paper/final_paper/input-dist-subm.pdf&quot;&gt;The Effect of VSIDS on S&lt;small&gt;AT&lt;/small&gt; Solver Performance&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;Conflict clause learning is a technique that generates an “conflict clause” by using an &lt;a href=&quot;https://en.wikipedia.org/wiki/Implication_graph&quot;&gt;implication graph&lt;/a&gt; that examines how conflict arises after unit propagation. Conflict happens when all literals in a clause are forced to yield &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; (which is the case when we have an empty clause, if our algorithm deletes False literal). Thus the process above is often referred to as conflict analysis. If you are interested in learning more about it, check out &lt;a href=&quot;http://www.msoos.org/2011/05/understanding-implication-graphs/&quot;&gt;this great article (with pictures)&lt;/a&gt; by &lt;a href=&quot;https://github.com/msoos&quot;&gt;msoos&lt;/a&gt; from &lt;a href=&quot;http://www.msoos.org/&quot;&gt;Wondering of a S&lt;small&gt;AT&lt;/small&gt; geek&lt;/a&gt;. Wanna dive deeper? You’d certainly find these papers useful:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.cs.rochester.edu/u/kautz/papers/learnIjcai.pdf&quot;&gt;Understanding the Power of Clause Learning&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.cs.princeton.edu/courses/archive/fall13/cos402/readings/SAT_learning_clauses.pdf&quot;&gt;Clause Learning in S&lt;small&gt;AT&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.jair.org/media/1410/live-1410-2304-jair.pdf&quot;&gt;Towards Understanding and Harnessing the Potential of Clause Learning&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.princeton.edu/~chaff/publication/iccad2001_final.pdf&quot;&gt;Efficient Conflict Driven Learning in a Boolean Satisfiability Solver&lt;/a&gt;.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;S&lt;small&gt;AT&lt;/small&gt; solvers that use such technique are also known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Conflict-Driven_Clause_Learning&quot;&gt;Conflict-Driven Clause-Learning (CDCL) S&lt;small&gt;AT&lt;/small&gt; Solvers&lt;/a&gt;.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;Other ways of improving performance of DPLL-based algorithms include&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;adding conflict clauses (generated by conflict analysis as described above) into the formula to prevent from getting into the same conflict again.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;implementing unit propagation by using a technique that watches 2 literals at a time, instead of keeping track of all literals, in which case &lt;a href=&quot;http://cs.stackexchange.com/q/44924/11573&quot;&gt;you’d need to sacrifice pure literal elimination&lt;/a&gt;. To learn more read &lt;a href=&quot;http://www.princeton.edu/~chaff/publication/DAC2001v56.pdf&quot;&gt;this 2001 paper&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Other than using heuristic for decision as described above, we can use heuristic for backtracking. And that is actually what’s done in many CDCL S&lt;small&gt;AT&lt;/small&gt; Solvers.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Backtracking like the one in classical DPLL is called chronological backtracking. Chronological in the sense that we we simply go back to the previous decision level. In heuristic backtracking, we go back to a decision level (or backtrack point) based on a &lt;strong&gt;heuristic function&lt;/strong&gt;. The principal behind it is that we should learn from conflicts and avoid making the mistake of trying out all different variables assignments down a decision level only to find out that all the assignment at that decision level would only lead to unsatisfiability. That is to say that we would rely on the heuristic to help us in figuring out if the boolean assignment at some previous decision level may be a bad pick, and that we should backtrack all the way up.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;implementing some &lt;em&gt;restart&lt;/em&gt; policies, which force the solver to backtrack to decision level 0 (or some other level) when some condition is met. This is to prevent the solver from getting “stuck” at some part of the &lt;a href=&quot;http://wiki.lesswrong.com/wiki/Search_space&quot;&gt;search space&lt;/a&gt; for a long time. To learn more about it, check out &lt;a href=&quot;http://users.cecs.anu.edu.au/~jinbo/07-ijcai-restarts.pdf&quot;&gt;The Effect of Restarts on the Efficiency of Clause Learning&lt;/a&gt; and &lt;a href=&quot;ftp://ftp.research.microsoft.com/pub/ejh/drestart.pdf&quot;&gt;Dynamic Restart Policies&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;and many and many more.&lt;/p&gt;

&lt;h3 id=&quot;end-note---further-reading&quot;&gt;End Note - Further reading:&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://cacm.acm.org/magazines/2014/3/172516-boolean-satisfiability/fulltext&quot;&gt;Boolean Satisfiability: Theory and Engineering (2014)&lt;/a&gt; &lt;small class=&quot;wordCount&quot;&gt;755 words&lt;/small&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://cstheory.stackexchange.com/a/6891/30600&quot;&gt;Why is 2S&lt;small&gt;AT&lt;/small&gt; in P? (a CS.SE post)&lt;/a&gt; &lt;small class=&quot;wordCount&quot;&gt;300+ words&lt;/small&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.princeton.edu/~chaff/publication/cade_cav_2002.pdf&quot;&gt;The Quest for Efficient Boolean Satisfiability Solvers (2002)&lt;/a&gt; &lt;small class=&quot;wordCount&quot;&gt;~9k words&lt;/small&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.489.8416&amp;amp;rep=rep1&amp;amp;type=pdf&quot;&gt;The S&lt;small&gt;AT&lt;/small&gt; Phase Transition (1994)&lt;/a&gt; &lt;small class=&quot;wordCount&quot;&gt;~5k words&lt;/small&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.cs.cornell.edu/gomes/papers/satsolvers-kr-handbook.pdf&quot;&gt;Satisfiability Solvers&lt;/a&gt; &lt;small class=&quot;wordCount&quot;&gt;a chapter from &lt;a href=&quot;http://www.amazon.com/gp/product/0444522115/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0444522115&amp;amp;linkCode=as2&amp;amp;tag=0aarhe-20&amp;amp;linkId=UZ2R6YMF7HQ6MZSN&quot;&gt;Handbook of Knowledge Representation&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.cs.toronto.edu/~fbacchus/csc2512/Lectures/2013Readings/Skallah_Empirical_Study_SAT_Solvers.pdf&quot;&gt;Empirical Study of the Anatomy of Modern Sat Solvers&lt;/a&gt; &lt;small class=&quot;wordCount&quot;&gt;~5k words&lt;/small&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/1586039296/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1586039296&amp;amp;linkCode=as2&amp;amp;tag=0aarhe-20&amp;amp;linkId=4SB427BUQ5LKHOFJ&quot;&gt;Handbook of Satisfiability&lt;/a&gt; &lt;small class=&quot;wordCount&quot;&gt;a book&lt;/small&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.cs.toronto.edu/~chechik/courses03/csc2108/algorithms-for-satisfiability.pdf&quot;&gt;Algorithms for the Satisfiability Problem: A Survey (1996)&lt;/a&gt; &lt;small class=&quot;wordCount&quot;&gt;~60k words&lt;/small&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/3319092839/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=3319092839&amp;amp;linkCode=as2&amp;amp;tag=0aarhe-20&amp;amp;linkId=ZKNKEH4TF3DC6R7R&quot;&gt;Theory and Applications of Satisfiability Testing - S&lt;small&gt;AT&lt;/small&gt; 2014&lt;/a&gt; &lt;small class=&quot;wordCount&quot;&gt;a book&lt;/small&gt; &lt;small&gt;Also available on &lt;a href=&quot;http://www.springer.com/us/book/9783319092836&quot;&gt;springer&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;script&gt;
(function(){
var bqt = document.getElementById(&quot;blockquoteToggle&quot;);
var bqHidden = false;
var x = document.getElementsByTagName(&quot;blockquote&quot;),
    xx =  document.getElementById(&quot;introduction&quot;);
bqt.addEventListener(&quot;click&quot;,function(){
    if(!bqHidden){
        bqt.innerHTML = &quot;Click here to show the introduction and all &lt;i&gt; Blocks of Grey Text&lt;/i&gt;.&quot;
        for(var i = 0; i &lt; x.length; i++){
            x[i].style.display = &quot;none&quot;;
        }
        xx.style.display = &quot;none&quot;;
    }else{
        bqt.innerHTML= &quot;Click here to hide the introduction and all &lt;i&gt; Blocks of Grey Text&lt;/i&gt;.&quot;
        for(var i = 0; i &lt; x.length; i++){
            x[i].style.display = &quot;block&quot;;
        }
        xx.style.display = &quot;block&quot;;
    }
    bqHidden = !bqHidden;
});
})();
&lt;/script&gt;

</description>
        <pubDate>Thu, 06 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://0a.io/boolean-satisfiability-problem-or-sat-in-5-minutes/</link>
        <guid isPermaLink="true">http://0a.io/boolean-satisfiability-problem-or-sat-in-5-minutes/</guid>
        
        
      </item>
    
  </channel>
</rss>
